* TermNet
** Data-types
   datatype 'a termNet 
     = Net of parameters                     -- type { fifo : bool }
              * int                          -- next available id
              * (int                         -- size
                 * (int                      -- id
                    * 'a)                    -- type of values in net
                   net) option
** Term nets are basically tries. In METIS, branch labels on the tries are terms with all variable names thrown out.
  1) a leaf containing some values
  2) a stem marked by a term
  3) a branch, splitting at:
       a plain variable (optional)
       a functor and arity
*** Identifiers
**** Every element added to the term net is given a unique identifier. When the net is used to match a term, the possible matches can be ordered by identifier, provided that fifo = true in parameters. This is hard-coded to false in METIS client code, meaning that the identifiers are unused. size is likewise unused by client-code.

* Resolution loop
** If there are no clauses left in the waiting queue, then the problem is decided and satisfiable. Otherwise, remove the lightest clause. If it is a contradiction, then the problem is decided and contradictory. Otherwise, add the clause to the active set, returning a new active set and some new clauses. Add the new clauses to the waiting set. Continue.
*** ACTIVE
**** datatype
   - parameters (all defaulted)
   - a map from int to clause
   - a rewriter, supporting multiple equations
     - parameters (all defaulted)
       - order: Set to KBO order using defaults defined in KnuthBendixOrder.sml
   - a set of clauses supporting efficient subsumption checking
   - a net of literals
   - a net of equations
   - a net of subterms
**** ADD: attempt to add a clause to the active set, returning deduced clauses and the new set.
***** Simplify
    Algorithm
    1. use Clause.simplify, which just calls Rule.simplify.
       If a tautology is found, None is returned (deleting the clause). Otherwise:
       1. Expand Abbreviations
          This means we look for conditionals of the form x = t ==> P, which in clausal form have the shape ¬(x = t) ∨ P. The t is substituted for x throughout P.
       2. Remove Syms
          This means that we remove equalities/inequalities which are symmetries of each other.
       3. If nothing has changed, return the new theorem. Otherwise, simplify again.
    2. Rewrite the theorem
    3. Resolving against its unit clauses
    4. If subsumption checking is turned on, and the clause is subsumed according to the supplied subsumption set, then it is deleted (return None)
***** Post-simplification
    Algorithm
    1. If no clause is returned after simplification, then no clauses are returned.
    2. If the clause is a contradiction, then return it as the derived clause.
    3. If the clause has been simplified, then factor the clause, and return any
       factorings.
    4. If no simplification occurred, then add the clause to the active set. Next, create a version of the clause with fresh variables (side-effect on the global name count), and carry out deductions. Factor the deductions through the active set, and return the result.
*** Deduction
**** Deduce resolution
**** Paramodulation with largest subterms (as a net) and equations on the results
**** Paramodulation into equations with the largest subterms (as a net)
*** Factoring
**** Try to simplify each new clause
**** For each clause that is not deleted by simplification:
     1) Obtain all substitutions which factor the clause of largest literals in the clause, and apply these.
     2) Sort these so that contradictions come first, unit equalities next, then unit theorems, then everything else by number of literals.
     3) Go through the list, and add each element to the active set whenever it is not deleted by simplification, extending the rewriter and subsumption checker.
     4) Interreduce the rewrite system.
     5) Extract any theorems can be reduced by any new rewrite rules, and run these
        through the factoring loop.
*** REWRITER
**** datatype
   - A reduction order (defaulted externally to KBO)
   - A map from theorem ids to equations with optional orientation
   - A term net whose keys are redexes and whose values are equations ids into the above map with optional orientation. The integer map is used as a more efficient check on the presence of an equation in the map.
   - A term net used for interreduction of equations. The keys are subterms of an equation and the values are:
     - an equation id into the above map naming the equation of which we are a subterm
     - a path to the subterm in the equation
     - an indicator saying whether the subterm is on the left or the right hand side of the equality symbol.
   - A set of equations which have not yet been been reduced
**** The only part of the rewrite code that is actually called externally is rewriteIdRule
  1. Given a theorem, grab its literals.
  2. From the literals, separate out the negated equalities from the literals (can be treated as conditions to rewrite the other literals), whose left and right hand sides are KBO comparable, and map them to conversions which will send the greater side to the smaller.
  3. Inter-reduce the negated equalities as well as rewriting with the system of rewrite rules.
     1. Remove a negated equality from the map.
     2. Rewrite it top-down, repeatedly
         1. trying the first conversion for the negated equalities in the map
         2. the system of rewrites
     3. If the negated equality is changed, add it back in the map. Otherwise put it with the other literals.
     4. Go to 1 until there are no more changes.
  4. Use the rewrite from step 3.2 above across all the literals not in the map. (this doesn't sound right, or is at least inefficient. Why bother rewriting the formerly negated equalities, given that we know these have been fully normalised?)
***** Inter-reduction
   1. Is there a known, oriented equation in the todo set, favouring oriented equations?
      a. YES: reduce1 and loop, passing "false" as new
      b. NO:  If there such an equation in the waiting set?
         i. YES: reduce1 and loop, passing "true" as new
         ii. NO: Rebuild
             1. Remove all redexes not added to rpl (the new set of redexes)
             2. Go through all redexes added to rpl, and, if unknown, add them to known
             3. Remove all subterms not added to spl (the new set of subterms)
             4. Go through all ids added to spl, and if unknown, add all the subterms of the equation with that id.
   2. reduce1
      1. Rewrite the equation with the rewrite system
      2. If equations are not identical and, assuming equation was oriented, redexes are not the same, add the equation id to a new set of redexes (rpl)
      3. If new is "false", meaning we came from todo, and the equations are not identical, then add the equation id to a new set of subterms (spl)
      4. If we did not come from "todo" or equations are not identical, add the id to changed. (probably just be for debugging. Gets checked for null at the end, but result is discarded).
      5. Get the new orientation (don't bother computing a term-order if the redexes are the same, since in that case, the orientation can't have changed).
      6. If both sides have become equal, delete the equation from known.
      7. Otherwise, if we came from waiting or the redexes have changed, find reducibles
         1. Find all subterms from the other equations which match the redex of the given equation (either side if not oriented) in the subterm net. Discard those which come from equations already on the "todo" list. Presumably because term-nets overmatch, grab the concrete term in the equation and make sure that it does match and that it reduces the term ordering. If so, add it to the "todo" list.
         2. 
      8. If the equations are not identical, replace the new equation in known
      9. If the redexes have changed, add the new redex into redexes
     10. If we came from "waiting" and the equations are not identical, add its subterms to the net

* Factor rule
** Accumulate the factoring substitutions, until agenda of edges is empty.
** Agenda element:
     apart list
     substitution
     edge list
** Pop an element from the agenda
** If the edge list is empty, add the substitution to the accumulator.
** Given the next edge on the edge list, try to join the edge using the substitution. If: 
   1) the edge is joinable using a more specific substitution, add the following element to the agenda:
         apart list + joinable edge
         original substitution
         other edges in the original element
      Update the apart list with the more specific substitution. If this fails, continue. If it succeeds, add the new apart list, the more specific substitution, and the other edges to the agenda.
   2) if the edge is not joinable, continue

** Join-edge
*** unify the two ends of the edge. If this is not possible, then return APART. If the substitution is the same, return JOINED. Otherwise, return JOINABLE of the new substitution.
** Update-apart
*** Go through the edges of the apart list, joining the edges with the new substitution. If JOINED is ever returned, then fail. If APART is returned, drop the edge. If JOINABLE is returned, keep the edge.
* Subsumption
  Clause cl1 subsumes cl2 if there is a substitution θ such that cl1[θ] is a subset of cl2. 
** Data structure
   | field   | description                                |
   |---------+--------------------------------------------|
   | empty   | a clause, a substitution and an annotation |
   | unit    | the literal, the clause and an annotation  |
   | nonunit | structure                                  | 

   We'll simplify empty just down to a boolean. It doesn't need to be filtered. If you prove the empty clause, the search is over.

   | field   | description                                                            |
   |---------+------------------------------------------------------------------------|
   | nextId  | a fresh index into clauses                                             |
   |---------+------------------------------------------------------------------------|
   | clauses | a map from ints to a clause, the clause's literals suitably sorted,    |
   |         | and an annotation                                                      |
   |---------+------------------------------------------------------------------------|
   | fstLits | a literal net, to a clause id and the number of literals in the clause |
   |---------+------------------------------------------------------------------------|
   | sndLits | as fstLits                                                             |

   The annotation is returned by the subsumes function for the first subsuming clause. A hook predicate is provided in subsumption checking to ignore potential subsumers based on this annotation, but by default, the predicate is just "K true". Otherwise, the annotation is used for filtering the subsumption set.

** [[file:~/metis/src/Subsume.sml::fun%20genClauseSubsumes%20pred%20cl'%20lits'%20cl%20a%20%3D][genClauseSubsumes]]
   :PROPERTIES:
   :ID:       6fae569b-6eb5-40ce-97b6-8b035278b920
   :END:
   | parameter | description                                                   |
   |-----------+---------------------------------------------------------------|
   | pred      | Unused. Always defaults to K true                             |
   | cl'       | The subsuming clause                                          |
   | lits'     | The literals of cl' as sorted and maintained in nonunit's map |
   | cl        | The subsumed clause                                           |

   Possibly returns a subsuming substitution.
*** referenced by
    - [[id:b515bb2e-c1b1-4593-bb8b-bee63b558c31][genSubsumes]]
*** Implementation
    With a substitution as state, writing a list of lists of substitutions, evaluate:
    1. For each lit', mapMaybe (match lit') across cl. 
       - If there are no substitutions, fail.
       - If there is exactly one substitution sub, attempt to modify the saved substitution by forming its *union* with sub. Then continue with the remaining lits'.
       - If there are multiple substitutions, write them and continue.
    2. Search for a path through the list of lists of substitutions for a path of substitutions which we can form the union across with the above state.
**** Notes    
     The complication of writing both a list of lists of substitutions and a state substitution is an optimisation. We could instead just always write the list of substitutions. Using the extra logic assumes that it is better to compute the union of substitution along all stems and throw out impossibilities before we ever bother to search.

** [[file:~/metis/src/Subsume.sml::fun%20nonunitSubsumes%20pred%20nonunit%20max%20cl%20%3D][genSubsumes]]
   :PROPERTIES:
   :ID:       b515bb2e-c1b1-4593-bb8b-bee63b558c31
   :END:
   | parameter | description                         |
   |-----------+-------------------------------------|
   | max       | size of potentially subsumed clause |
   | cl        | subsumed clause                     |

   Possibly returns a subsuming substitution.
*** referenced by
    - [[id:5a798b4c-1b39-43b6-be8c-0b282a14a78a][genSubsumes]]
*** Implementation
   - Go through the literals of all clauses, looking them up in both the fstLits and sndLits nets and filtering out returned clauses which have more literals than the subsumed clause (see [[id:23f6eade-2443-47ed-930e-11dc287b6546][Notes]])
   - Intersect the candidate clauses, and grab their literals as computed during insertion into the nets. 
**** Notes
     :PROPERTIES:
     :ID:       23f6eade-2443-47ed-930e-11dc287b6546
     :END:
     Code is complicated by the possibility of asking for "non-strictness". Strictness means that we don't bother asking whether cl' subsumes cl when cl' has more lits than cl. This is not equivalent, as a factor of cl' might still subsume cl, however, so long as factors are always added to the subsumption set, we are good.
   

